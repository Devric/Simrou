// Generated by CoffeeScript 1.3.3

/**
* @preserve Simrou v1.4.0 - Released under the MIT License.
* Copyright (c) 2012 büro für ideen, www.buero-fuer-ideen.de
*/


(function() {
  var Route, Simrou,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice;

  Simrou = (function() {

    Simrou.prototype.RegExpCache = {
      extractHash: /^[^#]*(#.*)$/,
      trimHash: /^#*(.*?)\/*$/
    };

    Simrou.prototype.eventSupported = (function() {
      var docMode;
      docMode = window.document.documentMode;
      return 'onhashchange' in window && (!(docMode != null) || docMode > 7);
    })();

    function Simrou(initialRoutes) {
      this.handleFormSubmit = __bind(this.handleFormSubmit, this);

      this.resolveHash = __bind(this.resolveHash, this);
      this.routes = {};
      this.observingHash = false;
      this.observingForms = false;
      if (initialRoutes != null) {
        this.addRoutes(initialRoutes);
      }
    }

    Simrou.prototype.addRoute = function(pattern, actionHandler) {
      var route;
      route = pattern instanceof Route ? pattern : new Route(pattern);
      if (actionHandler != null) {
        route.attachActions(actionHandler);
      }
      return this.routes[route.getRegExp().toString()] = route;
    };

    Simrou.prototype.addRoutes = function(routes) {
      var list, pattern, route, _i, _len;
      if ($.isFunction(routes)) {
        list = routes.call(this);
      } else if ($.isArray(routes)) {
        list = [];
        for (_i = 0, _len = routes.length; _i < _len; _i++) {
          route = routes[_i];
          list.push(this.addRoute(route));
        }
      } else {
        list = {};
        for (pattern in routes) {
          if (!__hasProp.call(routes, pattern)) continue;
          route = routes[pattern];
          list[pattern] = this.addRoute(pattern, route);
        }
      }
      return list;
    };

    Simrou.prototype.removeRoute = function(route) {
      var name;
      if (!(route instanceof Route)) {
        route = new Route(route);
      }
      name = route.getRegExp().toString();
      if (name in this.routes) {
        return delete this.routes[name];
      }
    };

    Simrou.prototype.navigate = function(hash) {
      var previousHash;
      previousHash = this.getHash();
      location.hash = hash;
      if (!this.observingHash || location.hash === previousHash) {
        return this.resolve(hash, 'get');
      }
    };

    Simrou.prototype.resolve = function(hash, method) {
      var $route, args, cleanHash, name, route, _ref;
      cleanHash = String(hash).replace(this.RegExpCache.trimHash, '$1');
      if (cleanHash === '') {
        if (String(hash).indexOf('/') === -1) {
          return false;
        } else {
          cleanHash = '/';
        }
      }
      _ref = this.routes;
      for (name in _ref) {
        if (!__hasProp.call(_ref, name)) continue;
        route = _ref[name];
        if (!(route instanceof Route)) {
          continue;
        }
        args = route.match(cleanHash);
        if (!args) {
          continue;
        }
        args.unshift(method);
        $route = $(route);
        $route.trigger('simrou:any', args);
        if ((method != null) && method !== 'any') {
          $route.trigger('simrou:' + method.toLowerCase(), args);
        }
        return true;
      }
      return false;
    };

    Simrou.prototype.getHash = function(url) {
      if (url == null) {
        url = location.hash;
      }
      return String(url).replace(this.RegExpCache.extractHash, '$1');
    };

    Simrou.prototype.resolveHash = function(event) {
      var hash, url;
      if (this.eventSupported) {
        url = event.originalEvent.newURL;
      }
      hash = this.getHash(url);
      return this.resolve(hash, 'get');
    };

    Simrou.prototype.handleFormSubmit = function(event) {
      var $form, action, method;
      $form = $(event.target);
      method = $form.attr('method') || $form.get(0).getAttribute('method');
      action = this.getHash($form.attr('action'));
      if (this.resolve(action, method)) {
        event.preventDefault();
      }
      return true;
    };

    Simrou.prototype.start = function(initialHash, observeHash, observeForms) {
      var hash;
      if (observeHash == null) {
        observeHash = true;
      }
      if (observeForms == null) {
        observeForms = true;
      }
      if (observeHash) {
        $(window).on('hashchange', this.resolveHash);
        this.observingHash = true;
      }
      if (observeForms) {
        $('body').on('submit', 'form', this.handleFormSubmit);
        this.observingForms = true;
      }
      hash = this.getHash();
      if (hash !== '') {
        return this.resolve(hash, 'get');
      } else if (initialHash != null) {
        if ((window.history != null) && (window.history.replaceState != null)) {
          window.history.replaceState({}, document.title, '#' + initialHash.replace(/^#+/, ''));
          return this.resolve(initialHash, 'get');
        } else {
          return this.navigate(initialHash);
        }
      }
    };

    Simrou.prototype.stop = function() {
      $(window).off('hashchange', this.resolveHash);
      this.observingHash = false;
      $('body').off('submit', 'form', this.handleFormSubmit);
      return this.observingForms = false;
    };

    return Simrou;

  })();

  Route = (function() {
    var shortcut;

    Route.prototype.RegExpCache = {
      escapeRegExp: /[-[\]{}()+?.,\\^$|#\s]/g,
      namedParam: /:\w+/g,
      splatParam: /\*\w*/g,
      firstParam: /(:\w+)|(\*\w*)/
    };

    function Route(pattern) {
      this.pattern = pattern != null ? pattern : /^.+$/;
      if (this.pattern instanceof RegExp) {
        this.expr = this.pattern;
      } else {
        pattern = String(this.pattern).replace(this.RegExpCache.escapeRegExp, '\\$&');
        pattern = pattern.replace(this.RegExpCache.namedParam, '([^\/]+)');
        pattern = pattern.replace(this.RegExpCache.splatParam, '(.*?)');
        this.expr = new RegExp('^' + pattern + '$');
      }
    }

    Route.prototype.match = function(hash) {
      var matches;
      matches = this.expr.exec(hash);
      if ($.isArray(matches)) {
        return matches.slice(1);
      } else {
        return false;
      }
    };

    Route.prototype.assemble = function() {
      var url, value, values;
      values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (this.pattern instanceof RegExp) {
        throw 'Assembling routes that are based on a regular expression is not supported.';
      }
      if (values.length > 0 && $.isArray(values[0])) {
        values = values[0];
      }
      url = String(this.pattern);
      while (this.RegExpCache.firstParam.test(url)) {
        value = values.length > 0 ? values.shift() : '';
        if ($.isFunction(value)) {
          value = value(this);
        }
        url = url.replace(this.RegExpCache.firstParam, String(value));
      }
      return url;
    };

    Route.prototype.getRegExp = function() {
      return this.expr;
    };

    Route.prototype.attachAction = function(action, method) {
      if (method == null) {
        method = 'any';
      }
      return $(this).on('simrou:' + method.toLowerCase(), action);
    };

    Route.prototype.attachActions = function(actions, method) {
      var action, list, tmp, _ref, _results;
      if (method == null) {
        method = 'any';
      }
      if (!$.isPlainObject(actions)) {
        _ref = [{}, actions], actions = _ref[0], tmp = _ref[1];
        actions[method] = tmp;
      }
      _results = [];
      for (method in actions) {
        if (!__hasProp.call(actions, method)) continue;
        list = actions[method];
        if (!$.isArray(list)) {
          list = [list];
        }
        _results.push((function() {
          var _i, _len, _results1;
          _results1 = [];
          for (_i = 0, _len = list.length; _i < _len; _i++) {
            action = list[_i];
            _results1.push(this.attachAction(action, method));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Route.prototype.detachAction = function(action, method) {
      var eventName;
      if (method == null) {
        method = 'any';
      }
      if (typeof action === 'string') {
        method = action;
      }
      eventName = 'simrou:' + method.toLowerCase();
      if ($.isFunction(action)) {
        return $(this).off(eventName, action);
      } else {
        return $(this).off(eventName);
      }
    };

    shortcut = function(method) {
      return function(action) {
        return this.attachAction(action, method);
      };
    };

    Route.prototype.get = shortcut('get');

    Route.prototype.post = shortcut('post');

    Route.prototype.put = shortcut('put');

    Route.prototype["delete"] = shortcut('delete');

    Route.prototype.any = shortcut('any');

    return Route;

  })();

  window.Simrou = $.Simrou = Simrou;

}).call(this);
